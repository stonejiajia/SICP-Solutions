

#+BEGIN_SRC scheme :session :results output
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))


(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom y))))

(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define one-half (make-rat 1 2))

(print-rat one-half)


#+END_SRC

#+RESULTS:
: "\n1/2"


#+BEGIN_SRC scheme :session :results output 

(define one-third (make-rat 1 3))

(print-rat (add-rat one-half one-third))

(make-rat 2 8)
#+END_SRC

#+RESULTS:
: "5/6"

#+BEGIN_SRC scheme :session 
(define (gcd a b)
  (if (= b 0)
      a
  (gcd b (remainder a b))))
#+END_SRC

#+RESULTS:

* 2.1

#+BEGIN_SRC scheme :session :results output 
(define (make-rat n d)
  (let ((g ((if (< d 0) - +) (abs (gcd n d)))))
    (cons (/ n g) (/ d g))))

(printf (make-rat 2 -8))
#+END_SRC

#+RESULTS:
: "An error occurred."
